openapi: 3.0.3

info:
  title: ZAMONG Service
  description: ZAMONG Service Backend API Specification
  contact:
    name: API Support
    email: jiwoourty@gmail.com
  version: 0.0.1

servers:
  - url: 'http://localhost:8080'
    description: localhost server

tags:

  - name: auth
    description: 사용자 인증 관련 API
  - name: user
    description: 사용자 관련 API
  - name: dream
    description: 꿈 관련 API

paths:

  '/auth/user-id/duplicate':
    post:
      tags:
        - auth
      summary: "회원가입시 아이디 중복 확인 API"
      description: "회원가입시 아이디가 중복되는지 확인하기 위한 API입니다"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                id:
                  $ref: '#/components/parameters/id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdNotDuplicateResponse'

  '/auth/mail':
    post:
      tags:
        - auth
      summary: "이메일 전송 API"
      description: "API를 호출하면 이메일로 인증코드를 전송합니다"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                address:
                  $ref: '#/components/parameters/email'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueTokenResponse'

  '/auth/signup':
    post:
      tags:
        - auth
      summary: "회원가입 API"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  $ref: '#/components/parameters/name'
                email:
                  $ref: '#/components/parameters/email'
                authentication_code:
                  $ref: '#/components/parameters/authentication_code'
                id:
                  $ref: '#/components/parameters/id'
                password:
                  $ref: '#/components/parameters/password'
      responses:
        201:
          description: 회원가입 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignedUserResponse'

  '/auth/login':
    post:
      tags:
        - auth
      summary: "로그인 API"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                user_identity:
                  $ref: '#/components/parameters/user_identity'
                password:
                  $ref: '#/components/parameters/password'
      responses:
        200:
          description: 로그인 성공
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueTokenResponse'

  '/auth/refresh':
    post:
      tags:
        - auth
      summary: "토큰 재발급 API"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                access_token:
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ..."
                refresh_token:
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ..."
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueTokenResponse'

  '/user/{user-uuid}':
    parameters:
      - $ref: '#/components/parameters/user-uuid'
    get:
      description: '사용자 기본 정보'
      tags:
        - user
      summary: "사용자 기본정보 API"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    example: 200
                  response:
                    $ref: '#/components/schemas/UserInformationResponse'

  '/user/me':
    parameters:
      - name: Authorization
        in: header
        description: Authorization Bearer Header
        example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ..."
    get:
      description: '내 기본 정보'
      tags:
        - user
      summary: "내 기본정보 API"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInformationResponse'

components:

  parameters:
    user-uuid:
      name: user-uuid
      in: path
      description: UUID 형태의 사용자의 식별자
      example: 7359fee5-426f-45f5-bd24-cc675e7bdd13
    name:
      example: 김진근
    email:
      example: 201403kjg@dsm.hs.kr
    authentication_code:
      example: "000000"
    id:
      example: dsm_jingeun04
    password:
      example: 사용자 비밀번호
    user_identity:
      example: 사용자 id 또는 email
    timestamp:
      example: "2021-09-27T18:22:45.426066"

  schemas:

    UserInformationResponse:
      properties:
        status:
          example: 201
        timestamp:
          $ref: '#/components/parameters/timestamp'
        content:
          readOnly: true
          properties:
            collection_value:
              example: false
            response:
              properties:
                uuid:
                  $ref: '#/components/parameters/user-uuid'
                name:
                  $ref: '#/components/parameters/name'
                email:
                  $ref: '#/components/parameters/email'
                id:
                  $ref: '#/components/parameters/id'
                share_dream_count:
                  example: 18
                lucy_count:
                  example: 87

    SignedUserResponse:
      properties:
        status:
          example: 201
        timestamp:
          $ref: '#/components/parameters/timestamp'
        content:
          readOnly: true
          properties:
            collection_value:
              example: false
            response:
              properties:
                uuid:
                  $ref: '#/components/parameters/user-uuid'
                name:
                  $ref: '#/components/parameters/name'
                email:
                  $ref: '#/components/parameters/email'
                id:
                  $ref: '#/components/parameters/id'

    MailSentResponse:
      properties:
        status:
          example: 200
        timestamp:
          $ref: '#/components/parameters/timestamp'
        content:
          readOnly: true
          properties:
            collection_value:
              example: false
            response:
              example: "메일을 성공적으로 보냈습니다"

    IdNotDuplicateResponse:
      properties:
        status:
          example: 200
        timestamp:
          $ref: '#/components/parameters/timestamp'
        content:
          readOnly: true
          properties:
            collection_value:
              example: false
            response:
              example: "사용가능한 아이디입니다"

    IssueTokenResponse:
      properties:
        status:
          example: 200
        timestamp:
          $ref: '#/components/parameters/timestamp'
        content:
          readOnly: true
          properties:
            collection_value:
              example: false
            response:
              properties:
                access_token:
                  example: "eeyJhbGciOiJIUzI1NiJ9..."
                refresh_token:
                  example: "eyJhbGciOiJIUzI1NiJ9..."